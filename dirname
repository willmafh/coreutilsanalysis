/* dirname -- strip suffix from file name */

#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <error.h>

static struct option const longopts[] = {
    {"zero", no_argument, NULL, 'z'}
};


#define FILE_SYSTEM_PREFIX_LEN(filename) 0
#define ISSLASH(C) ((C) == '/')
#define FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE 0
#define DOUBLE_SLASH_IS_DISTINCT_ROOT 0

/*
 * Return the address of the last file name component of NAME.
 * If NAME has no relative file name components because it is
 * a file system root, return the empty string.
 */
char *
last_component (char const *name)
{
    char const *base = name + FILE_SYSTEM_PREFIX_LEN (name);
    char const *p;
    int saw_slash = 0;

    while (ISSLASH (*base)) {
        base++;
    }

    for (p = base; *p; p++) {
        if (ISSLASH (*p)) {
            saw_slash = 1;
        } else if (saw_slash) {
            base = p;
            saw_slash = 0;
        }
    }

    return (char *) base;
}

/*
 * Return the length of the prefix of FILE that will be used by dir_name.
 * If FILE is in the working directory, this returns zero even though
 * 'dir_name (FILE)' will return ".".  Works properly even if there are
 * trailing slashes (by effectively ignoring them).
 */
size_t
dir_len (char const *file)
{
    /* here prefix_length = 0 */
    size_t prefix_length = FILE_SYSTEM_PREFIX_LEN (file);    
    size_t length;
    /*
     * Advance prefix_length beyond important leading slashes.
     * here, if file[0] is slash, then prefix_length += 1;
     */
    prefix_length += (prefix_length != 0 ?
                      (FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE && ISSLASH (file[prefix_length]))
                      : (ISSLASH (file[0]) ? ((DOUBLE_SLASH_IS_DISTINCT_ROOT &&
                                               ISSLASH (file[1]) && ! ISSLASH (file[2]) ? 2 : 1)) : 0));

    /* Strip the basename and any redundant slashes before it.  */
    for (length = last_component (file)-file; prefix_length < length; length--)
        if (! ISSLASH (file[length-1])) {
            break;
        }

    return length;
}

int
main (int argc, char **argv)
{
    static char const dot = '.';
    int use_nuls = 0;
    char const *result;
    size_t len;

    while (1) {
        int c = getopt_long (argc, argv, "z", longopts, NULL);

        if (c == -1) {
            break;
        }

        switch (c) {
            case 'z':
                use_nuls = 1;
                break;

            default:
                exit (EXIT_FAILURE);
        }
    }

    if (argc < optind + 1) {
        error (0, 0, "missing operand");
        exit (EXIT_FAILURE);
    }

    for (; optind < argc; optind++) {
        result = argv[optind];
        len = dir_len (result);

        if (! len) {
            result = &dot;
            len = 1;
        }

        /* print first len byte(s) of result to stdout */
        fwrite (result, 1, len, stdout);
        putchar (use_nuls ? '\0' : '\n');
    }

    return EXIT_SUCCESS;
}
